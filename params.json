{"name":"Pygobject","tagline":"Mirror of git://git.gnome.org/pygobject","body":"PyGObject\r\n=====\r\nOriginal authors:   James Henstridge <james@daa.com.au>\r\n                    Johan Dahlin <johan@gnome.org>\r\n\r\nCurrent maintainers:  Tomeu Vizoso <tomeu.vizoso@collabora.co.uk>\r\n                      Martin Pitt <martinpitt@gnome.org>\r\n                      Paolo Borelli <pborelli@gnome.org>\r\n                      Ignacio Casal Quinteiro <icq@gnome.org>\r\n                      Sebastian PÃ¶lsterl <sebp@k-d-w.org>\r\n\t\t      \r\n\r\nThis archive contains bindings for the GLib, and GObject,\r\nto be used in Python. It is a fairly complete set of bindings,\r\nit's already rather useful, and is usable to write moderately\r\ncomplex programs.  (see the examples directory for some examples\r\nof the simpler programs you could write).\r\n\r\nIf you have any enhancements or bug reports, please file them in\r\nbugzilla at:\r\n  http://bugzilla.gnome.org/enter_bug.cgi?product=pygobject\r\n\r\nIf you have a patch, file the bug first and then use the \"create new\r\nattachment\" link on the bug's info page.  My preferred format for\r\npatches is unified diff format (ie. diff -u).  Please don't send me\r\ndiffs which don't have any context, as these make it very difficult to\r\nsee what the patch does.\r\n\r\nNew Versions\r\n============\r\n\r\nNew versions of this package can be found at:\r\n  http://ftp.gnome.org/pub/GNOME/sources/pygobject/\r\n\r\n\r\nMailing list\r\n============\r\n\r\npygobject development is discussed on the GNOME python-hackers mailing list.\r\nYou can subscribe to it through the web interface:\r\n\r\n  https://mail.gnome.org/mailman/listinfo/python-hackers-list/\r\n\r\nRequirements\r\n============\r\n  * C compiler (GCC and MSVC supported)\r\n  * Python 2.7 or higher\r\n  * Glib/Gio 2.35.9 or higher\r\n  * libffi (optional)\r\n\r\nCopyright Information\r\n=====================\r\n\r\nThis software is covered by the GNU Lesser General Public Licence\r\n(version 2.1, or if you choose, a later version).  Basically just don't\r\nsay you wrote bits you didn't.\r\n\r\nCompilation\r\n===========\r\n\r\nPyGObject uses the standard autotools for the build infrastructure.  To\r\nbuild, it should be as simple as running:\r\n\r\n    $ ./configure --prefix=<prefix where python is installed>\r\n    $ make\r\n    $ make install\r\n\r\nBy default, configure searches for a few well-known Python interpreter\r\nnames, such as \"python3\", \"python2\", \"python2.7\", or \"python\".  If your\r\nPython interpreter isn't in the path, or is not called \"python\", you can\r\nconfigure pygobject to build against that with --with-python=<path> or\r\nsetting the PYTHON environment variable:\r\n\r\n   $ ./configure --with-python=python3\r\n   $ PYTHON=python3.2 ./configure\r\n   $ ./configure --with-python=~/my-patched-python/python\r\n\r\nIf configure can't find GTK+, you may need to set the PKG_CONFIG_PATH\r\nenvironment variable to help it find the libraries.\r\n\r\nThe \"make install\" target will generate normal and optimised bytecode\r\nfor all the .py files.\r\n\r\nNote. If you're installing to another prefix than the one where python\r\nis installed you'll need to set the PYTHONPATH variable to the\r\n$prefix/lib/pythonX.Y/site-packages directory created by\r\nthe PyGObject installation.\r\n\r\nTests\r\n=====\r\n\r\nAfter having compiled and installed pygobject, you may want to test them.\r\nThere are a number of example programs available in the examples/\r\nsubdirectory.\r\n\r\n\r\nGetting Help\r\n============\r\n\r\nIf you have questions about programming with PyGObject, you might want to\r\ncheck the documentation on\r\n\r\n  https://live.gnome.org/PyGObject/\r\n\r\nIf that does not help, send a message to the mailing list (information on\r\nsubscribing is above), or join #python on irc.gnome.org.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}